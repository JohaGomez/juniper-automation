import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import org.openqa.selenium.WebElement as WebElement
import org.openqa.selenium.support.ui.Select as Select
import com.kms.katalon.core.webui.common.WebUiCommonHelper as WebUiCommonHelper
import org.openqa.selenium.By as By
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import java.time.Duration
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import groovy.json.JsonSlurper
import com.kms.katalon.core.util.KeywordUtil
import com.kms.katalon.core.testobject.ConditionType
import utils.ValidacionesPrecios
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.testobject.TestObject
import utils.ValidacionesPreciosTabla
import com.kms.katalon.core.model.FailureHandling as FH

// üö™ Login
WebUI.callTestCase(findTestCase('Euromundo/Login/Login_otn'), [:], FailureHandling.STOP_ON_FAILURE)

// üìÇ Navegaci√≥n al men√∫ Gran Deal Internacional
WebUI.waitForElementClickable(findTestObject('Euromundo/Gran_Deal/repository_GD_Inter/menu_gd'), 10)
WebUI.mouseOver(findTestObject('Euromundo/Gran_Deal/repository_GD_Inter/menu_gd'))
WebUI.click(findTestObject('Euromundo/Gran_Deal/repository_GD_Inter/select_international'))
WebUI.waitForElementClickable(findTestObject('Euromundo/book_steps/button_box'), 15)
WebUI.click(findTestObject('Euromundo/book_steps/button_box'))

// üç™ Aceptar Cookies
WebUI.click(findTestObject('Euromundo/book_steps/button_close_cookies'))

// üîç B√∫squeda
WebUI.waitForElementClickable(findTestObject('Euromundo/book_steps/input_destination_inter'), 15)
WebUI.selectOptionByValue(findTestObject('Euromundo/book_steps/input_destination_inter'), '177436', true ) // Destino
WebUI.waitForElementClickable(findTestObject('Euromundo/book_steps/select_origin_inter'), 15)
WebUI.selectOptionByValue(findTestObject('Euromundo/book_steps/select_origin_inter'), '35908', true ) // Origen
CustomKeywords.'utils.FechaUtils.setFechaViernesEnTresMeses'('Euromundo/book_steps/origin_date_inter') // Fecha

// üë• 1. Abrir selector de habitaciones y pasajeros
CustomKeywords.'helpers.WebUIHelper.safeClick'(findTestObject('Euromundo/widget/set_rooms_pax_inter'))

// üè® 2. Datos base de habitaciones y pasajeros
int habitaciones = 1
List<Integer> adultos = [2]
List<Integer> ninos = [0]
List<Integer> infantes = [0]

// üì• 3. Traer edades desde variables globales (si existen)
List<Integer> edadesNinos = (GlobalVariable.edadesNinos ?: []).findAll { it?.toString()?.isInteger() }.collect { it.toInteger() }
List<Integer> edadesInfantes = (GlobalVariable.edadesInfantes ?: []).findAll { it?.toString()?.isInteger() }.collect { it.toInteger() }

// üõ°Ô∏è 4. Validar rangos
boolean edadesNinosValidas = edadesNinos.every { it in 2..17 }
boolean edadesInfantesValidas = edadesInfantes.every { it in 0..1 }

if (!edadesNinosValidas || !edadesInfantesValidas) {
	KeywordUtil.markFailed("üö® Edades fuera de rango: Ni√±os: ${edadesNinos}, Infantes: ${edadesInfantes}")
	return
} else {
	KeywordUtil.markPassed("‚úÖ Edades v√°lidas: Ni√±os ${edadesNinos}, Infantes ${edadesInfantes}")
}

// ‚öôÔ∏è 5. Configurar habitaciones y pasajeros
CustomKeywords.'utils.configuration_rooms.configurarHabitacionesYPasajerosV2'(
	habitaciones, adultos, ninos, infantes, edadesNinos, edadesInfantes
)

// üëÅ 6. Capturar visualmente edades seleccionadas del DOM (para paso posterior)
List<Integer> edadesCapturadasNinos = []
List<Integer> edadesCapturadasInfantes = []

if (ninos.sum() > 0) {
	for (int i = 1; i <= ninos[0]; i++) {
		TestObject objNino = new TestObject("edad_nino_${i}")
		objNino.addProperty('xpath', ConditionType.EQUALS, "//*[@id='select2-room-selector-1-children-age-1-${i}-container']")
		
		WebUI.waitForElementVisible(objNino, 5)
		String edadTexto = WebUI.getText(objNino).replaceAll('\\D', '')
		int edad = edadTexto?.isInteger() ? edadTexto.toInteger() : -1
		
		if (edad in 2..17) {
			edadesCapturadasNinos.add(edad)
			WebUI.comment("üßí Edad Ni√±o ${i} capturada: ${edad}")
		} else {
			WebUI.comment("‚ùóEdad no v√°lida para ni√±o ${i}: ${edadTexto}")
		}
	}
}

if (infantes.sum() > 0) {
	for (int i = 1; i <= infantes[0]; i++) {
		TestObject objInf = new TestObject("edad_infante_${i}")
		objInf.addProperty('xpath', ConditionType.EQUALS, "//*[@id='select2-room-selector-1-babies-age-1-${i}-container']")
		
		WebUI.waitForElementVisible(objInf, 5)
		String edadTexto = WebUI.getText(objInf).replaceAll('\\D', '')
		int edad = edadTexto?.isInteger() ? edadTexto.toInteger() : -1
		
		if (edad in 0..1) {
			edadesCapturadasInfantes.add(edad)
			WebUI.comment("üë∂ Edad Infante ${i} capturada: ${edad}")
		} else {
			WebUI.comment("‚ùóEdad no v√°lida para infante ${i}: ${edadTexto}")
		}
	}
}

// Clic en bot√≥n de b√∫squeda
WebUI.click(findTestObject('Euromundo/Gran_Deal/repository_GD_Inter/button_search_inter'))

//Guardar titulo del paquete para despu√©s comparar en p√°gina de pax
TestObject tituloObj = new TestObject("tituloDinamico")
tituloObj.addProperty("xpath", ConditionType.EQUALS, '//*[@id="results-list"]/div[2]/div/div[1]/article/div[1]/div[2]/div[1]')

//Guardar el texto en una variable local
String tituloGuardado = WebUI.getText(tituloObj)

// --- Crear TestObject para capturar el mejor precio en la p√°gina de resultados ---
TestObject mejorPrecioObj = new TestObject().addProperty(
    "xpath", ConditionType.EQUALS,
    "//div[@class='info-card__content']//span[@class='js-currency-conversor']"
)

// --- Llamar a la keyword para capturar y validar el precio en p√°gina de resultados ---
double mejorPrecio = CustomKeywords.'utils.ValidacionPrecios.validarMejorPrecioEnResultados'(mejorPrecioObj)


// ‚úàÔ∏è Seleccionar vuelo charter
WebUI.waitForElementClickable(findTestObject('Euromundo/book_steps/button_prebook_gd_inter'), 10)

//‚úàÔ∏è Validaci√≥n de informaci√≥n de vuelo
// --------------------------------------------------
// 1. Abrir la lista desplegable de detalles del vuelo
// --------------------------------------------------
TestObject toggleInfo = new TestObject("toggleInfo")
toggleInfo.addProperty("xpath", ConditionType.EQUALS,
    "//div[contains(@class,'result-option-package__row') and contains(@class,'flight')]//button[contains(@class,'result-option-package__moreinfo-toggle')]")

// Clic en el toggle si est√° presente
if (WebUI.verifyElementPresent(toggleInfo, 10, FailureHandling.OPTIONAL)) {
    WebUI.click(toggleInfo)
    WebUI.waitForElementVisible(
        new TestObject().addProperty("xpath", ConditionType.EQUALS,
            "//div[contains(@class,'flight-segments__segment-info')]"),
        10
    )
    println "‚úÖ Toggle de vuelos clickeado y desplegado"
} else {
    println "‚ö†Ô∏è No se encontr√≥ el toggle de vuelos"
}

// --------------------------------------------------
// 2. Esperar a que se muestre la informaci√≥n extendida
// --------------------------------------------------
WebUI.waitForElementVisible(
    new TestObject().addProperty("xpath", ConditionType.EQUALS,
        "//div[contains(@class,'flight-segments__segment-info')]"),
    10
)

// --------------------------------------------------
// 3. Capturar informaci√≥n de vuelo de IDA
// --------------------------------------------------

// N√∫mero de vuelo (2do div dentro de flight-segments__segment-info)
TestObject vueloIdaObj = new TestObject("vueloIdaObj")
vueloIdaObj.addProperty("xpath", ConditionType.EQUALS,
    "(//div[contains(@class,'flight-segments__segment-info')]/div[2])[1]")
String numeroVueloIda = WebUI.getText(vueloIdaObj).replace("Vuelo:", "").trim()

// Charter?
boolean idaEsCharter = numeroVueloIda.endsWith("N")

if (idaEsCharter) {
    KeywordUtil.logInfo("‚úàÔ∏è El vuelo de IDA ${numeroVueloIda} es CHARTER")
} else {
    KeywordUtil.logInfo("‚úàÔ∏è El vuelo de IDA ${numeroVueloIda} es REGULAR")
}

// Clase (3er div)
TestObject claseIdaObj = new TestObject("claseIdaObj")
claseIdaObj.addProperty("xpath", ConditionType.EQUALS,
    "(//div[contains(@class,'flight-segments__segment-info')]/div[3])[1]")
String claseVueloIda = WebUI.getText(claseIdaObj).replace("Clase:", "").trim()

// Equipaje (4to div)
TestObject equipajeIdaObj = new TestObject("equipajeIdaObj")
equipajeIdaObj.addProperty("xpath", ConditionType.EQUALS,
    "(//div[contains(@class,'flight-segments__segment-info')]/div[4])[1]")
String equipajeIda = WebUI.getText(equipajeIdaObj).replace("Equipaje:", "").trim()

// --------------------------------------------------
// 4. Capturar informaci√≥n de vuelo de REGRESO
// --------------------------------------------------

// N√∫mero de vuelo
TestObject vueloRegresoObj = new TestObject("vueloRegresoObj")
vueloRegresoObj.addProperty("xpath", ConditionType.EQUALS,
    "(//div[contains(@class,'flight-segments__segment-info')]/div[2])[2]")
String numeroVueloRegreso = WebUI.getText(vueloRegresoObj).replace("Vuelo:", "").trim()

// Charter?
boolean regresoEsCharter = numeroVueloRegreso.endsWith("N")

if (regresoEsCharter) {
    KeywordUtil.logInfo("‚úàÔ∏è El vuelo de REGRESO ${numeroVueloRegreso} es CHARTER")
} else {
    KeywordUtil.logInfo("‚úàÔ∏è El vuelo de REGRESO ${numeroVueloRegreso} es REGULAR")
}

// Clase
TestObject claseRegresoObj = new TestObject("claseRegresoObj")
claseRegresoObj.addProperty("xpath", ConditionType.EQUALS,
    "(//div[contains(@class,'flight-segments__segment-info')]/div[3])[2]")
String claseVueloRegreso = WebUI.getText(claseRegresoObj).replace("Clase:", "").trim()

// Equipaje
TestObject equipajeRegresoObj = new TestObject("equipajeRegresoObj")
equipajeRegresoObj.addProperty("xpath", ConditionType.EQUALS,
    "(//div[contains(@class,'flight-segments__segment-info')]/div[4])[2]")
String equipajeRegreso = WebUI.getText(equipajeRegresoObj).replace("Equipaje:", "").trim()

// --------------------------------------------------
// 5. Mostrar resultados en consola
// --------------------------------------------------
println "‚úàÔ∏è Vuelo IDA -> N√∫mero: ${numeroVueloIda}, Clase: ${claseVueloIda}, Equipaje: ${equipajeIda}"
KeywordUtil.logInfo("‚úàÔ∏è Vuelo IDA -> N√∫mero: ${numeroVueloIda}, Clase: ${claseVueloIda}, Equipaje: ${equipajeIda}")
println "‚úàÔ∏è Vuelo REGRESO -> N√∫mero: ${numeroVueloRegreso}, Clase: ${claseVueloRegreso}, Equipaje: ${equipajeRegreso}"
KeywordUtil.logInfo("‚úàÔ∏è Vuelo REGRESO -> N√∫mero: ${numeroVueloRegreso}, Clase: ${claseVueloRegreso}, Equipaje: ${equipajeRegreso}")

// --------------------------------------------------
// 6. Guardar en variables globales para validaciones posteriores
// --------------------------------------------------
GlobalVariable.vuelos = [
    [tipo: "IDA", numero: numeroVueloIda, clase: claseVueloIda, equipaje: equipajeIda],
    [tipo: "REGRESO", numero: numeroVueloRegreso, clase: claseVueloRegreso, equipaje: equipajeRegreso]
]

WebUI.click(findTestObject('Euromundo/book_steps/button_prebook_gd_inter'))

// üë• Datos de pasajeros
WebUI.waitForElementClickable(findTestObject('Euromundo/book_steps/button_finalization_prebook'), 10)

// üõ° Validar nuevamente rangos por seguridad
boolean edadesValidas = edadesCapturadasNinos.every { it in 2..17 } && edadesCapturadasInfantes.every { it in 0..1 }
if (!edadesValidas) {
	KeywordUtil.markFailed("üö® Edades inv√°lidas detectadas ‚ûú Ni√±os: ${edadesCapturadasNinos}, Infantes: ${edadesCapturadasInfantes}")
} else {
	// ‚úÖ Pasar directamente a la keyword
	CustomKeywords.'utils.PassengerFormHelper.fillPassengerData'(
		edadesCapturadasNinos, edadesCapturadasInfantes
	)
}

// Esperar a que carguen los elementos
WebUI.waitForElementVisible(findTestObject('Euromundo/book_steps/button_finalization_prebook'), 15)

//Guardar titulo del paquete para comparar
TestObject otroTituloObj = new TestObject("otroTitulo")
otroTituloObj.addProperty("xpath", ConditionType.EQUALS, '//*[@id="main-content"]/div[2]/div/div[3]/div[1]/div/div/div/div[1]/div[2]/div[1]')

//Capturar el texto del segundo t√≠tulo
String tituloNuevo = WebUI.getText(otroTituloObj)

//Comparar
	if(tituloGuardado.equals(tituloNuevo)) {
		println("‚úÖ Los t√≠tulos son iguales")
	} else {
		println("‚ùå Los t√≠tulos son diferentes")
	}

// --------------------------------------------------
// üìã COMPARACI√ìN DE VUELOS ENTRE RESULTADOS Y DETALLE EXPANDIDO
// --------------------------------------------------

// 1. Abrir toggle de detalle de vuelos (si est√° oculto)
TestObject toggleDetalleVuelos = new TestObject("toggleDetalleVuelos")
toggleDetalleVuelos.addProperty("xpath", ConditionType.EQUALS,
	"//div[contains(@class,'result-option-package__row') and contains(@class,'flight')]//button[contains(@class,'result-option-package__moreinfo-toggle')]")

if (WebUI.verifyElementPresent(toggleDetalleVuelos, 10, FailureHandling.OPTIONAL)) {
	WebUI.scrollToElement(toggleDetalleVuelos, 5)
	WebUI.click(toggleDetalleVuelos)
	WebUI.waitForElementVisible(
		new TestObject().addProperty("xpath", ConditionType.EQUALS,
			"(//div[contains(@class,'flight-segments__segment-info')])[1]"),
		10
	)
	KeywordUtil.logInfo("‚úÖ Toggle de detalle de vuelos desplegado correctamente para la comparaci√≥n.")
} else {
	KeywordUtil.logInfo("‚ÑπÔ∏è No se encontr√≥ el toggle de detalle de vuelos. Es posible que ya est√© desplegado.")
}

// --------------------------------------------------
// 2. Capturar datos de IDA en el detalle
// --------------------------------------------------
TestObject vueloIdaDetalleObj = new TestObject("vueloIdaDetalleObj")
vueloIdaDetalleObj.addProperty("xpath", ConditionType.EQUALS,
	"(//div[contains(@class,'flight-segments__segment-info')]/div[2])[1]")
String numeroVueloIdaDetalle = WebUI.getText(vueloIdaDetalleObj).replace("Vuelo:", "").trim()

TestObject claseIdaDetalleObj = new TestObject("claseIdaDetalleObj")
claseIdaDetalleObj.addProperty("xpath", ConditionType.EQUALS,
	"(//div[contains(@class,'flight-segments__segment-info')]/div[3])[1]")
String claseVueloIdaDetalle = WebUI.getText(claseIdaDetalleObj).replace("Clase:", "").trim()

TestObject equipajeIdaDetalleObj = new TestObject("equipajeIdaDetalleObj")
equipajeIdaDetalleObj.addProperty("xpath", ConditionType.EQUALS,
	"(//div[contains(@class,'flight-segments__segment-info')]/div[4])[1]")
String equipajeIdaDetalle = WebUI.getText(equipajeIdaDetalleObj).replace("Equipaje:", "").trim()

// --------------------------------------------------
// 3. Capturar datos de REGRESO en el detalle
// --------------------------------------------------
TestObject vueloRegresoDetalleObj = new TestObject("vueloRegresoDetalleObj")
vueloRegresoDetalleObj.addProperty("xpath", ConditionType.EQUALS,
	"(//div[contains(@class,'flight-segments__segment-info')]/div[2])[2]")
String numeroVueloRegresoDetalle = WebUI.getText(vueloRegresoDetalleObj).replace("Vuelo:", "").trim()

TestObject claseRegresoDetalleObj = new TestObject("claseRegresoDetalleObj")
claseRegresoDetalleObj.addProperty("xpath", ConditionType.EQUALS,
	"(//div[contains(@class,'flight-segments__segment-info')]/div[3])[2]")
String claseVueloRegresoDetalle = WebUI.getText(claseRegresoDetalleObj).replace("Clase:", "").trim()

TestObject equipajeRegresoDetalleObj = new TestObject("equipajeRegresoDetalleObj")
equipajeRegresoDetalleObj.addProperty("xpath", ConditionType.EQUALS,
	"(//div[contains(@class,'flight-segments__segment-info')]/div[4])[2]")
String equipajeRegresoDetalle = WebUI.getText(equipajeRegresoDetalleObj).replace("Equipaje:", "").trim()

// --------------------------------------------------
// 4. Mostrar resultados en consola y Log Viewer
// --------------------------------------------------
KeywordUtil.logInfo("‚úàÔ∏è  Datos capturados del detalle de vuelos:")
KeywordUtil.logInfo("‚û°Ô∏è  IDA -> N√∫mero: ${numeroVueloIdaDetalle}, Clase: ${claseVueloIdaDetalle}, Equipaje: ${equipajeIdaDetalle}")
KeywordUtil.logInfo("‚û°Ô∏è  REGRESO -> N√∫mero: ${numeroVueloRegresoDetalle}, Clase: ${claseVueloRegresoDetalle}, Equipaje: ${equipajeRegresoDetalle}")

println "‚úàÔ∏è Vuelo IDA -> N√∫mero: ${numeroVueloIdaDetalle}, Clase: ${claseVueloIdaDetalle}, Equipaje: ${equipajeIdaDetalle}"
println "‚úàÔ∏è Vuelo REGRESO -> N√∫mero: ${numeroVueloRegresoDetalle}, Clase: ${claseVueloRegresoDetalle}, Equipaje: ${equipajeRegresoDetalle}"

// --------------------------------------------------
// 5. Comparaciones con GlobalVariable.vuelos
// --------------------------------------------------
Map vueloIdaGuardado = GlobalVariable.vuelos.find { it.tipo == "IDA" }
Map vueloRegresoGuardado = GlobalVariable.vuelos.find { it.tipo == "REGRESO" }

if (!vueloIdaGuardado || !vueloRegresoGuardado) {
	KeywordUtil.markWarning("‚ö†Ô∏è No se encontraron vuelos en GlobalVariable.vuelos. Verifica que se hayan guardado correctamente antes de esta validaci√≥n.")
}

// --------------------------------------------------
// 6. Validaci√≥n de vuelos IDA
// --------------------------------------------------
if (vueloIdaGuardado?.numero == numeroVueloIdaDetalle &&
	vueloIdaGuardado?.clase == claseVueloIdaDetalle &&
	vueloIdaGuardado?.equipaje == equipajeIdaDetalle) {

	KeywordUtil.logInfo("‚úÖ La informaci√≥n de IDA coincide correctamente entre resultados y detalle.")
} else {
	KeywordUtil.markFailed("‚ùå Discrepancia detectada en los datos de IDA (n√∫mero, clase o equipaje).")
}

assert vueloIdaGuardado?.numero == numeroVueloIdaDetalle : "‚ùå N√∫mero de vuelo IDA distinto (${vueloIdaGuardado?.numero} vs ${numeroVueloIdaDetalle})"
assert vueloIdaGuardado?.clase == claseVueloIdaDetalle : "‚ùå Clase IDA distinta (${vueloIdaGuardado?.clase} vs ${claseVueloIdaDetalle})"
assert vueloIdaGuardado?.equipaje == equipajeIdaDetalle : "‚ùå Equipaje IDA distinto (${vueloIdaGuardado?.equipaje} vs ${equipajeIdaDetalle})"

// --------------------------------------------------
// 7. Validaci√≥n de vuelos REGRESO
// --------------------------------------------------
if (vueloRegresoGuardado?.numero == numeroVueloRegresoDetalle &&
	vueloRegresoGuardado?.clase == claseVueloRegresoDetalle &&
	vueloRegresoGuardado?.equipaje == equipajeRegresoDetalle) {

	KeywordUtil.logInfo("‚úÖ La informaci√≥n de REGRESO coincide correctamente entre resultados y detalle.")
} else {
	KeywordUtil.markFailed("‚ùå Discrepancia detectada en los datos de REGRESO (n√∫mero, clase o equipaje).")
}

assert vueloRegresoGuardado?.numero == numeroVueloRegresoDetalle : "‚ùå N√∫mero de vuelo REGRESO distinto (${vueloRegresoGuardado?.numero} vs ${numeroVueloRegresoDetalle})"
assert vueloRegresoGuardado?.clase == claseVueloRegresoDetalle : "‚ùå Clase REGRESO distinta (${vueloRegresoGuardado?.clase} vs ${claseVueloRegresoDetalle})"
assert vueloRegresoGuardado?.equipaje == equipajeRegresoDetalle : "‚ùå Equipaje REGRESO distinto (${vueloRegresoGuardado?.equipaje} vs ${equipajeRegresoDetalle})"

// --------------------------------------------------
// 8. Validaci√≥n de vuelos CHARTER
// --------------------------------------------------
idaEsCharter = numeroVueloIdaDetalle?.endsWith("N")
regresoEsCharter = numeroVueloRegresoDetalle?.endsWith("N")

if (idaEsCharter) {
	KeywordUtil.logInfo("üõ©Ô∏è El vuelo de IDA (${numeroVueloIdaDetalle}) es CHARTER.")
} else {
	KeywordUtil.logInfo("üõ´ El vuelo de IDA (${numeroVueloIdaDetalle}) es REGULAR.")
}

if (regresoEsCharter) {
	KeywordUtil.logInfo("üõ©Ô∏è El vuelo de REGRESO (${numeroVueloRegresoDetalle}) es CHARTER.")
} else {
	KeywordUtil.logInfo("üõ´ El vuelo de REGRESO (${numeroVueloRegresoDetalle}) es REGULAR.")
}

// --------------------------------------------------
// 9. Resumen final
// --------------------------------------------------
KeywordUtil.logInfo("üìã Validaci√≥n de vuelos completada correctamente en la p√°gina de pasajeros.")
KeywordUtil.logInfo("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
	
	
// TestObjects de la p√°gina de pasajeros para validaci√≥n de precios
TestObject precioObj = new TestObject().addProperty("xpath", ConditionType.EQUALS,
	"//div[@class='booking-breakdown__item booking-breakdown__item--total booking-breakdown__item--is-pay-web']//span[@class='booking-breakdown__item-price']")
TestObject comisionObj = new TestObject().addProperty("xpath", ConditionType.EQUALS,
	"//div[@class='booking-breakdown__item']//span[contains(text(),'Comisiones')]/following-sibling::span")
TestObject precioFinalObj = new TestObject().addProperty("xpath", ConditionType.EQUALS,
	"//div[@class='booking-breakdown__item']//span[contains(text(),'Precio final')]/following-sibling::span")
TestObject totalAdeudadoObj = new TestObject().addProperty("xpath", ConditionType.EQUALS,
	"//span[@class='agent-markup__total-due-price']")

CustomKeywords.'utils.ValidacionesPrebook.validarPrecioPrebook'(
    precioObj, 
    comisionObj, 
    precioFinalObj, 
    totalAdeudadoObj, 
    mejorPrecio
)

WebUI.click(findTestObject('Euromundo/book_steps/button_finalization_prebook'))

// üîΩ Selecci√≥n de pasajero responsable
TestObject paxDropdown = new TestObject('dynamicPaxSelect')
paxDropdown.addProperty('xpath', ConditionType.EQUALS, '//select[contains(@class,\'js-set-confirm-pax-data\')]')
WebElement dropdownElem = WebUiCommonHelper.findWebElement(paxDropdown, 10)
new Select(dropdownElem).selectByIndex(1)

// üè† Datos de contacto
WebUI.setText(findTestObject('Euromundo/checkout_page/passport_booking_holder'), '102635')
Map<String, String> contactFields = [('holder_city') : 'Bogota', ('holder_zipcode') : '110111', ('holder_address') : 'Virrey']

contactFields.each({ def name, def value ->
        TestObject input = new TestObject(name)
        input.addProperty('xpath', ConditionType.EQUALS, "//input[@name='$name']")
        WebUI.waitForElementVisible(input, 10)
        WebUI.setText(input, value)
    })

WebUI.setText(findTestObject('Euromundo/checkout_page/phone_booking_holder'), '3218111877')

// ‚úÖ Aceptaci√≥n de condiciones
WebUI.click(findTestObject('Euromundo/checkout_page/checkbox_fare_breakdown'))
def cb = findTestObject('Euromundo/checkout_page/checkbox_importantinfo')

if (WebUI.waitForElementPresent(cb, 3, FailureHandling.OPTIONAL) &&
	!WebUI.verifyElementChecked(cb, 1, FailureHandling.OPTIONAL)) {
  WebUI.scrollToElement(cb, 2, FailureHandling.OPTIONAL)
  try {
	WebUI.click(findTestObject('Euromundo/checkout_page/checkbox_importantinfo'))
  } catch (Exception e) {
	WebUI.enhancedClick(cb) // fallback sin romper el flujo
  }
} else {
  WebUI.comment('‚û°Ô∏è Checkbox no presente o ya marcado. Contin√∫o con el flujo.')
}
WebUI.click(findTestObject('Euromundo/checkout_page/checkbox_TyC_checkout'))

//üíæ Validaciones de precios para cerrar reserva 

// Crear un TestObject para el t√≠tulo en Book
TestObject tituloBookObj = new TestObject('tituloBookObj')
tituloBookObj.addProperty('xpath', ConditionType.EQUALS, '//*[@id="main-content"]/div[2]/div/div/div[1]/div[1]/div/div[2]/table/tbody/tr[1]/td/div[2]/div[1]/span')

// Obtener el texto desde el TestObject
String tituloBook = WebUI.getText(tituloBookObj).trim()
KeywordUtil.logInfo("üìå T√≠tulo Book: ${tituloBook}")

// Comparaci√≥n
if (tituloNuevo == tituloBook) {
    KeywordUtil.logInfo("‚úÖ Los t√≠tulos coinciden")
} else {
    KeywordUtil.markFailedAndStop("‚ùå Los t√≠tulos NO coinciden: '${tituloNuevo}' vs '${tituloBook}'")
}

// ==========================
// ‚úÖ Validar precios en p√°gina de pasajeros
// ==========================


// --- TestObjects con XPaths actualizados (montos) ---
private TestObject byXpath(String name, String xpath) {
    TestObject t = new TestObject(name)
    t.addProperty('xpath', ConditionType.EQUALS, xpath)
    return t
}

// Precio
TestObject precioObj_pas = byXpath(
    'precioObj_pas',
    '//*[@id="main-content"]/div[2]/div/div/div[1]/div[1]/div/div[3]/div/div[2]/div[1]')

// Comisiones
TestObject comisionObj_pas = byXpath(
    'comisionObj_pas',
    '//*[@id="main-content"]/div[2]/div/div/div[1]/div[1]/div/div[3]/div/div[2]/div[2]/div/div[1]')

// Precio Final
TestObject precioFinalObj_pas = byXpath(
    'precioFinalObj_pas',
    '//*[@id="main-content"]/div[2]/div/div/div[1]/div[1]/div/div[3]/div/div[2]/div[2]/div/div[3]')

// Precio Paquete
TestObject precioPaqueteObj_pas = byXpath(
    'precioPaqueteObj_pas',
    '//*[@id="main-content"]/div[2]/div/div/div[1]/div[1]/div/div[2]/table/tbody/tr[2]/td')

// --- Llamada a la keyword de precios ---
CustomKeywords.'utils.ValidacionesPrecios.validarPrecio'(
  precioObj_pas,
  comisionObj_pas,
  precioFinalObj_pas,
  precioPaqueteObj_pas,
  mejorPrecio
)

// ==========================
// üìå Validaci√≥n tabla de desglose de comisiones
// ==========================

TestObject btnDesglose = new TestObject('btnDesglose').addProperty(
  'xpath', ConditionType.EQUALS,
  "//button[contains(.,'Desglose') or contains(.,'Breakdown') or contains(@class,'js-open-breakdown')]"
)


// Tabla del breakdown (OJO: es otra estructura distinta al DIV)
TestObject tablaDesgloseTable = new TestObject('tablaDesgloseTable').addProperty(
  'xpath', ConditionType.EQUALS,
  "//table[contains(@class,'confirm-booking__tableBreakdown__table')]"
)
WebUI.waitForElementPresent(tablaDesgloseTable, 10, FH.OPTIONAL)
WebUI.scrollToElement(tablaDesgloseTable, 3)
WebUI.waitForElementVisible(tablaDesgloseTable, 10, FH.OPTIONAL)

// Si tienes una clase utils.ValidacionesPreciosTabla con m√©todo validacionDesglose(mejorPrecio)
try {
  def valTabla = new utils.ValidacionesPreciosTabla()
  if (WebUI.verifyElementPresent(tablaDesgloseTable, 2, FH.OPTIONAL)) {
      valTabla.validacionDesglose(mejorPrecio)
      WebUI.comment("‚úÖ Validaci√≥n de la tabla de desglose ejecutada correctamente")
  } else {
      WebUI.comment("‚ö†Ô∏è La tabla de desglose de comisiones no est√° visible en pantalla")
  }
} catch (Throwable t) {
  WebUI.comment("‚ÑπÔ∏è Saltando validaci√≥n de tabla: clase/m√©todo no disponible: ${t.message}")
}

// üíæ Finalizar reserva
WebUI.click(findTestObject('Euromundo/book_steps/button_finalization_book'))

// ‚ùå Cancelaci√≥n de reserva
WebUI.click(findTestObject('Euromundo/book_steps/button_cancel_book'))
WebUI.waitForAlert(10)
WebUI.acceptAlert()

// üì¢ Validaci√≥n mensaje de cancelaci√≥n
TestObject alertCancel = new TestObject('dynamic/alertCancel')
alertCancel.addProperty('xpath', ConditionType.EQUALS, '//p[contains(@class,\'booking-details__status-text\') and contains(text(),\'Su reserva ha sido cancelada.\')]')
WebUI.waitForElementVisible(alertCancel, 10)
WebUI.scrollToElement(findTestObject('Euromundo/book_steps/bookings'), 10)
String actualText = WebUI.getText(alertCancel)
WebUI.verifyMatch(actualText.trim(), 'Su reserva ha sido cancelada.', false, FailureHandling.STOP_ON_FAILURE)
WebUI.comment('‚úÖ El texto de cancelaci√≥n se encontr√≥ correctamente.')