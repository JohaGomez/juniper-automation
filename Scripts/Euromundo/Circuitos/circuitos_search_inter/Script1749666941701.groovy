import static com.kms.katalon.core.checkpoint.CheckpointFactory.findCheckpoint
import static com.kms.katalon.core.testcase.TestCaseFactory.findTestCase
import static com.kms.katalon.core.testdata.TestDataFactory.findTestData
import static com.kms.katalon.core.testobject.ObjectRepository.findTestObject
import static com.kms.katalon.core.testobject.ObjectRepository.findWindowsObject
import com.kms.katalon.core.checkpoint.Checkpoint as Checkpoint
import com.kms.katalon.core.cucumber.keyword.CucumberBuiltinKeywords as CucumberKW
import com.kms.katalon.core.mobile.keyword.MobileBuiltInKeywords as Mobile
import com.kms.katalon.core.model.FailureHandling as FailureHandling
import com.kms.katalon.core.testcase.TestCase as TestCase
import com.kms.katalon.core.testdata.TestData as TestData
import com.kms.katalon.core.testng.keyword.TestNGBuiltinKeywords as TestNGKW
import com.kms.katalon.core.testobject.TestObject as TestObject
import com.kms.katalon.core.webservice.keyword.WSBuiltInKeywords as WS
import com.kms.katalon.core.webui.keyword.WebUiBuiltInKeywords as WebUI
import com.kms.katalon.core.windows.keyword.WindowsBuiltinKeywords as Windows
import internal.GlobalVariable as GlobalVariable
import org.openqa.selenium.Keys as Keys
import org.openqa.selenium.WebElement as WebElement
import org.openqa.selenium.support.ui.Select as Select
import com.kms.katalon.core.webui.common.WebUiCommonHelper as WebUiCommonHelper
import org.openqa.selenium.By as By
import com.kms.katalon.core.webui.driver.DriverFactory as DriverFactory
import java.time.Duration
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import groovy.json.JsonSlurper
import com.kms.katalon.core.util.KeywordUtil
import com.kms.katalon.core.testobject.ConditionType
import utils.ValidacionesPrecios
import com.kms.katalon.core.model.FailureHandling
import com.kms.katalon.core.testobject.TestObject
import utils.ValidacionesPreciosTabla
import com.kms.katalon.core.model.FailureHandling as FH
import utils.ValidacionesPrebook
import org.openqa.selenium.interactions.Actions

// üö™ Login
WebUI.callTestCase(findTestCase('Euromundo/Login/Login_otn'), [:], FailureHandling.STOP_ON_FAILURE)

// ‚ò∞ Men√∫ Circuitos
WebUI.waitForElementClickable(findTestObject('Euromundo/circuitos/repository_circuitos_inter/menu_circuitos'), 10)
WebUI.mouseOver(findTestObject('Euromundo/circuitos/repository_circuitos_inter/menu_circuitos'))
WebUI.click(findTestObject('Euromundo/circuitos/repository_circuitos_inter/select_circuitos_inter'))

// üì¶ Criterios de b√∫squeda
TestObject buttonBox = findTestObject('Euromundo/book_steps/button_box')

if (WebUI.waitForElementPresent(buttonBox, 10)) {
    WebUI.waitForElementVisible(buttonBox, 5)
    WebUI.waitForElementClickable(buttonBox, 5)
    WebUI.click(buttonBox)
} else {
    WebUI.comment("‚ùå No se encontr√≥ el bot√≥n 'button_box' dentro del tiempo de espera.")
    WebUI.takeScreenshot()
    assert false : "Elemento 'button_box' no encontrado en DOM"
}

// üç™ Aceptar Cookies
WebUI.click(findTestObject('Euromundo/book_steps/button_close_cookies'))

// üîç b√∫squeda
WebUI.waitForElementClickable(findTestObject('Euromundo/book_steps/input_destination_inter'), 15)
WebUI.selectOptionByValue(findTestObject('Euromundo/book_steps/input_destination_inter'), '35751', true)
WebUI.waitForElementClickable(findTestObject('Euromundo/book_steps/select_origin_inter'), 15)
WebUI.selectOptionByValue(findTestObject('Euromundo/book_steps/select_origin_inter'), '35908', true)
CustomKeywords.'utils.FechaUtils.setFechaAleatoriaDesdeTresMesesFuturo'('Euromundo/book_steps/origin_date_inter') //Fecha

// üë• 1. Abrir selector de habitaciones y pasajeros
CustomKeywords.'helpers.WebUIHelper.safeClick'(findTestObject('Euromundo/widget/set_rooms_pax_inter'))

// üè® 2. Datos base de habitaciones y pasajeros
int habitaciones = 1
List<Integer> adultos = [2]
List<Integer> ninos = [0]
List<Integer> infantes = [0]

// üì• 3. Traer edades desde variables globales (si existen)
List<Integer> edadesNinos = (GlobalVariable.edadesNinos ?: []).findAll { it?.toString()?.isInteger() }.collect { it.toInteger() }
List<Integer> edadesInfantes = (GlobalVariable.edadesInfantes ?: []).findAll { it?.toString()?.isInteger() }.collect { it.toInteger() }

// üõ°Ô∏è 4. Validar rangos
boolean edadesNinosValidas = edadesNinos.every { it in 2..17 }
boolean edadesInfantesValidas = edadesInfantes.every { it in 0..1 }

if (!edadesNinosValidas || !edadesInfantesValidas) {
	KeywordUtil.markFailed("üö® Edades fuera de rango: Ni√±os: ${edadesNinos}, Infantes: ${edadesInfantes}")
	return
} else {
	KeywordUtil.markPassed("‚úÖ Edades v√°lidas: Ni√±os ${edadesNinos}, Infantes ${edadesInfantes}")
}

// ‚öôÔ∏è 5. Configurar habitaciones y pasajeros
CustomKeywords.'utils.configuration_rooms.configurarHabitacionesYPasajerosV2'(
	habitaciones, adultos, ninos, infantes, edadesNinos, edadesInfantes
)

// üëÅ 6. Capturar visualmente edades seleccionadas del DOM (para paso posterior)
List<Integer> edadesCapturadasNinos = []
List<Integer> edadesCapturadasInfantes = []

if (ninos.sum() > 0) {
	for (int i = 1; i <= ninos[0]; i++) {
		TestObject objNino = new TestObject("edad_nino_${i}")
		objNino.addProperty('xpath', ConditionType.EQUALS, "//*[@id='select2-room-selector-1-children-age-1-${i}-container']")
		
		WebUI.waitForElementVisible(objNino, 5)
		String edadTexto = WebUI.getText(objNino).replaceAll('\\D', '')
		int edad = edadTexto?.isInteger() ? edadTexto.toInteger() : -1
		
		if (edad in 2..17) {
			edadesCapturadasNinos.add(edad)
			WebUI.comment("üßí Edad Ni√±o ${i} capturada: ${edad}")
		} else {
			WebUI.comment("‚ùóEdad no v√°lida para ni√±o ${i}: ${edadTexto}")
		}
	}
}

if (infantes.sum() > 0) {
	for (int i = 1; i <= infantes[0]; i++) {
		TestObject objInf = new TestObject("edad_infante_${i}")
		objInf.addProperty('xpath', ConditionType.EQUALS, "//*[@id='select2-room-selector-1-babies-age-1-${i}-container']")
		
		WebUI.waitForElementVisible(objInf, 5)
		String edadTexto = WebUI.getText(objInf).replaceAll('\\D', '')
		int edad = edadTexto?.isInteger() ? edadTexto.toInteger() : -1
		
		if (edad in 0..1) {
			edadesCapturadasInfantes.add(edad)
			WebUI.comment("üë∂ Edad Infante ${i} capturada: ${edad}")
		} else {
			WebUI.comment("‚ùóEdad no v√°lida para infante ${i}: ${edadTexto}")
		}
	}
}

// üîç Buscar resultados
WebUI.click(findTestObject('Euromundo/book_steps/button_search_inter'))

// üè® Verificar disponibilidad
boolean hotelVisible = WebUI.waitForElementVisible(findTestObject('Euromundo/book_steps/button_select_hotel'), 10, FailureHandling.OPTIONAL)

if (!(hotelVisible)) {
    WebUI.comment('üîÑ Reintentando b√∫squeda tras editar')
    WebUI.waitForElementClickable(findTestObject('Euromundo/book_steps/button_edit'), 10)
    WebUI.click(findTestObject('Euromundo/book_steps/button_edit'))
    WebUI.waitForElementVisible(findTestObject('Euromundo/book_steps/origin_date_inter'), 10)
    CustomKeywords.'utils.FechaUtils.setFechaAleatoriaDesdeTresMesesFuturo'('Euromundo/book_steps/origin_date_inter')
    WebUI.click(findTestObject('Euromundo/book_steps/button_search_inter'))
    WebUI.waitForElementVisible(findTestObject('Euromundo/book_steps/button_select_hotel'), 10)
}

//Guardar titulo del paquete para despu√©s comparar
TestObject tituloObj = new TestObject("tituloDinamico")
tituloObj.addProperty(
    "xpath",
    ConditionType.EQUALS,
    "(//div[@class=\"info-card__title\"])[1]"
)


//Guardar el texto en una variable local
String tituloGuardado = WebUI.getText(tituloObj)


WebUI.click(findTestObject('Euromundo/book_steps/button_select_hotel'))

// üßæ Buscar fila refundable y agregar carrito
try {
    List<WebElement> resultados = WebUiCommonHelper.findWebElements(findTestObject('divresultados'), 30)

    WebElement fila = resultados.find({ 
            it.getAttribute('data-refundable').equalsIgnoreCase('true')
        })

    if (fila != null) {
        fila.findElement(By.xpath('.//button[contains(@class,\'miBoton\')]')).click()

        WebUI.comment('‚úÖ Hotel refundable agregado al carrito')
    } else {
        WebUI.comment('‚ö†Ô∏è No se encontr√≥ hotel refundable')
    }
}
catch (Exception e) {
    WebUI.comment("‚ùå Error al buscar fila refundable: $e.message")
}

// --- Crear TestObject para capturar el mejor precio en la p√°gina de resultados ---
TestObject mejorPrecioObj = new TestObject().addProperty(
	"xpath", ConditionType.EQUALS,
	"(//span[@class='bestprice__amount'])[1]"
)

// --- Llamar a la keyword para capturar y validar el precio en p√°gina de resultados ---
double mejorPrecio = CustomKeywords.'utils.ValidacionPrecios.validarMejorPrecioEnResultados'(mejorPrecioObj)

// ‚úÖ Pre-booking
WebUI.waitForElementClickable(findTestObject('Euromundo/book_steps/button_prebook'), 10)
WebUI.scrollToElement(findTestObject('Euromundo/book_steps/button_prebook'), 10)
WebUI.click(findTestObject('Euromundo/book_steps/button_prebook'))

// üîÑ Si no finaliza, ajustar fecha regreso
boolean prebookVisible = WebUI.waitForElementVisible(findTestObject('Euromundo/book_steps/button_finalization_prebook'), 
    10, FailureHandling.OPTIONAL)

if (!(prebookVisible)) {
    WebUI.comment('üîÅ Ajustando fecha regreso y reintentando prebook')
    WebUI.waitForElementVisible(findTestObject('Euromundo/book_steps/button_comeback'), 10)
    WebUI.click(findTestObject('Euromundo/book_steps/button_comeback'))
    WebUI.waitForElementVisible(findTestObject('Euromundo/book_steps/button_edit'), 10)
    WebUI.click(findTestObject('Euromundo/book_steps/button_edit'))
    CustomKeywords.'utils.FechaUtils.setFechaAleatoriaDesdeTresMesesFuturo'('Euromundo/book_steps/origin_date_inter')
    WebUI.click(findTestObject('Euromundo/book_steps/button_search_inter'))
    WebUI.click(findTestObject('Euromundo/book_steps/button_prebook'))
}


// üë• Datos de pasajeros
WebUI.waitForElementClickable(findTestObject('Euromundo/book_steps/button_finalization_prebook'), 10)

// üõ° Validar nuevamente rangos por seguridad
boolean edadesValidas = edadesCapturadasNinos.every { it in 2..17 } && edadesCapturadasInfantes.every { it in 0..1 }
if (!edadesValidas) {
	KeywordUtil.markFailed("üö® Edades inv√°lidas detectadas ‚ûú Ni√±os: ${edadesCapturadasNinos}, Infantes: ${edadesCapturadasInfantes}")
} else {
	// ‚úÖ Pasar directamente a la keyword
	CustomKeywords.'utils.PassengerFormHelper.fillPassengerData'(
		edadesCapturadasNinos, edadesCapturadasInfantes
	)
}

// ‚öñÔ∏è Pol√≠tica de cancelaci√≥n (validaci√≥n estricta con normalize-space)
TestObject policyFees = new TestObject('policyFees')
policyFees.addProperty(
	'xpath',
	ConditionType.EQUALS,
	"//div[contains(@class,'col-sm-12') and contains(normalize-space(.),'Reserva sujeta a gastos de cancelaci√≥n')]"
)

if (WebUI.waitForElementPresent(policyFees, 5, FailureHandling.OPTIONAL)) {
	String txt = WebUI.getText(policyFees)?.trim()
	KeywordUtil.markFailedAndStop("üö´ Pol√≠tica restrictiva detectada: ${txt}")
} else {
	KeywordUtil.logInfo("‚úÖ No se detect√≥ pol√≠tica restrictiva, el flujo contin√∫a.")
}

//Guardar titulo del paquete para despu√©s comparar en p√°gina de pasajeros
TestObject otroTituloObj = new TestObject("otroTitulo")
otroTituloObj.addProperty("xpath", ConditionType.EQUALS, '//*[@id="main-content"]/div[2]/div/div[3]/div[1]/div/div/div/div[1]/div[2]/div[1]')

//Capturar el texto del segundo t√≠tulo
String tituloNuevo = WebUI.getText(otroTituloObj)

//Comparar
if(tituloGuardado.equals(tituloNuevo)) {
	println("‚úÖ Los t√≠tulos son iguales")
} else {
	println("‚ùå Los t√≠tulos son diferentes")
}

// =========================================
// ‚ö†Ô∏è Manejo de cambio de precio en warning
// =========================================
TestObject warningPrecioObj = new TestObject("warningPrecio")
warningPrecioObj.addProperty("xpath", ConditionType.EQUALS,
	"//div[@class='booking-warning__content']"
)

if (WebUI.verifyElementPresent(warningPrecioObj, 5, FailureHandling.OPTIONAL)) {
	KeywordUtil.logInfo("‚ö†Ô∏è Apareci√≥ un warning de cambio de precio")

	String warningText = WebUI.getText(warningPrecioObj)?.trim()
	KeywordUtil.logInfo("üìå Texto warning: ${warningText}")

	def matcher = (warningText =~ /\$?\s?([\d.,]+)\s?(USD|MXN)?/)
    def precios = matcher.collect { it[1]?.trim() }
    def monedas = matcher.collect { it[2]?.trim() }

	if (!precios.isEmpty()) {
		String nuevoPrecioStr = precios.last()
		try {
			// üöÄ Solo aqu√≠ se usa parseMoney
			mejorPrecio = ValidacionesPrebook.parseMoney(nuevoPrecioStr)
			KeywordUtil.logInfo("üí≤ Nuevo precio detectado (warning): ${mejorPrecio}")
		} catch (Exception e) {
			KeywordUtil.markWarning("‚ö†Ô∏è No se pudo convertir el nuevo precio: ${nuevoPrecioStr}")
		}
	} else {
		KeywordUtil.markWarning("‚ö†Ô∏è No se pudo extraer ning√∫n precio del warning")
	}
} else {
	KeywordUtil.logInfo("‚úÖ No apareci√≥ ning√∫n warning de cambio de precio")
}


// TestObjects de la p√°gina de pasajeros para validaci√≥n de precios
TestObject precioObj = new TestObject("precio")
precioObj.addProperty("xpath", ConditionType.EQUALS,
	"//div[@class='booking-breakdown__item booking-breakdown__item--total booking-breakdown__item--is-pay-web']//span[@class='booking-breakdown__item-price']")

TestObject comisionObj = new TestObject("comision")
comisionObj.addProperty("xpath", ConditionType.EQUALS,
	"//div[@class='booking-breakdown__item']//span[contains(text(),'Comisiones')]/following-sibling::span")

TestObject precioFinalObj = new TestObject("precioFinal")
precioFinalObj.addProperty("xpath", ConditionType.EQUALS,
	"//div[@class='booking-breakdown__item']//span[contains(text(),'Precio final')]/following-sibling::span")

TestObject totalAdeudadoObj = new TestObject("totalAdeudado")
totalAdeudadoObj.addProperty("xpath", ConditionType.EQUALS,
	"//span[@class='agent-markup__total-due-price']")

// ‚úÖ Llamada con los 5 par√°metros
CustomKeywords.'utils.ValidacionesPrebook.validarPrecioPrebook'(
	precioObj,
	comisionObj,
	precioFinalObj,
	totalAdeudadoObj,
	mejorPrecio
)


WebUI.click(findTestObject('Euromundo/book_steps/button_finalization_prebook'))

// üîΩ Selecci√≥n de pasajero responsable
TestObject paxDropdown = new TestObject('dynamicPaxSelect')
paxDropdown.addProperty('xpath', ConditionType.EQUALS, '//select[contains(@class,\'js-set-confirm-pax-data\')]')
WebElement dropdownElem = WebUiCommonHelper.findWebElement(paxDropdown, 10)
new Select(dropdownElem).selectByIndex(1)

// üè† Datos de contacto
WebUI.setText(findTestObject('Euromundo/checkout_page/passport_booking_holder'), '102635')

Map<String, String> contactFields = [('holder_city') : 'Bogota', ('holder_zipcode') : '110111', ('holder_address') : 'Virrey']

contactFields.each({ def name, def value ->
        TestObject input = new TestObject(name)
        input.addProperty('xpath', ConditionType.EQUALS, "//input[@name='$name']")
        WebUI.waitForElementVisible(input, 10)
        WebUI.setText(input, value)
    })

WebUI.setText(findTestObject('Euromundo/checkout_page/phone_booking_holder'), '3218111877')

// ‚úÖ Checkboxes y confirmaci√≥n
WebUI.click(findTestObject('Euromundo/checkout_page/checkbox_fare_breakdown'))
WebUI.click(findTestObject('Euromundo/checkout_page/checkbox_importantInfo'))
WebUI.click(findTestObject('Euromundo/checkout_page/checkbox_TyC_checkout'))

//üíæ Validaciones de precios para cerrar reserva

// Crear un TestObject para el t√≠tulo en Book
TestObject tituloBookObj = new TestObject('tituloBookObj')
tituloBookObj.addProperty('xpath', ConditionType.EQUALS, '//*[@id="main-content"]/div[2]/div/div/div[1]/div[1]/div/div[2]/table/tbody/tr[1]/td/div[2]/div[1]/span')

// Obtener el texto desde el TestObject
String tituloBook = WebUI.getText(tituloBookObj).trim()
KeywordUtil.logInfo("üìå T√≠tulo Book: ${tituloBook}")

// Comparaci√≥n
if (tituloNuevo == tituloBook) {
	KeywordUtil.logInfo("‚úÖ Los t√≠tulos coinciden")
} else {
	KeywordUtil.markFailedAndStop("‚ùå Los t√≠tulos NO coinciden: '${tituloNuevo}' vs '${tituloBook}'")
}

// ==========================
// ‚úÖ Validar precios en p√°gina de pasajeros
// ==========================

// --- Helper local para crear TestObjects din√°micos ---
private TestObject byXpath(String name, String xpath) {
	TestObject t = new TestObject(name)
	t.addProperty('xpath', ConditionType.EQUALS, xpath)
	return t
}

// Precio
TestObject precioObj_pas = byXpath(
	'precioObj_pas',
	'//*[@id="main-content"]/div[2]/div/div/div[1]/div[1]/div/div[3]/div/div[2]/div[1]'
)

// Comisiones
TestObject comisionObj_pas = byXpath(
	'comisionObj_pas',
	'//*[@id="main-content"]/div[2]/div/div/div[1]/div[1]/div/div[3]/div/div[2]/div[2]/div/div[1]'
)

// Precio Final
TestObject precioFinalObj_pas = byXpath(
	'precioFinalObj_pas',
	'//*[@id="main-content"]/div[2]/div/div/div[1]/div[1]/div/div[3]/div/div[2]/div[2]/div/div[3]'
)

// Precio Paquete
TestObject precioPaqueteObj_pas = byXpath(
	'precioPaqueteObj_pas',
	'//*[@id="main-content"]/div[2]/div/div/div[1]/div[1]/div/div[2]/table/tbody/tr[2]/td'
)

// --- Llamada a la keyword de precios ---
CustomKeywords.'utils.ValidacionesPrecios.validarPrecio'(
	precioObj_pas,
	comisionObj_pas,
	precioFinalObj_pas,
	precioPaqueteObj_pas,
	mejorPrecio
)


// ==========================
// üìå Validaci√≥n tabla de desglose de comisiones
// ==========================

TestObject btnDesglose = new TestObject('btnDesglose').addProperty(
  'xpath', ConditionType.EQUALS,
  "//button[contains(.,'Desglose') or contains(.,'Breakdown') or contains(@class,'js-open-breakdown')]"
)

// Tabla del breakdown (OJO: es otra estructura distinta al DIV)
TestObject tablaDesgloseTable = new TestObject('tablaDesgloseTable').addProperty(
  'xpath', ConditionType.EQUALS,
  "//table[contains(@class,'confirm-booking__tableBreakdown__table')]"
)
WebUI.waitForElementPresent(tablaDesgloseTable, 10, FH.OPTIONAL)
WebUI.scrollToElement(tablaDesgloseTable, 3)
WebUI.waitForElementVisible(tablaDesgloseTable, 10, FH.OPTIONAL)

// Si tienes una clase utils.ValidacionesPreciosTabla con m√©todo validacionDesglose(mejorPrecio)
try {
  def valTabla = new utils.ValidacionesPreciosTabla()
  if (WebUI.verifyElementPresent(tablaDesgloseTable, 2, FH.OPTIONAL)) {
	  valTabla.validacionDesglose(mejorPrecio)
	  WebUI.comment("‚úÖ Validaci√≥n de la tabla de desglose ejecutada correctamente")
  } else {
	  WebUI.comment("‚ö†Ô∏è La tabla de desglose de comisiones no est√° visible en pantalla")
  }
} catch (Throwable t) {
  WebUI.comment("‚ÑπÔ∏è Saltando validaci√≥n de tabla: clase/m√©todo no disponible: ${t.message}")
}

WebUI.click(findTestObject('Euromundo/book_steps/button_finalization_book'))
WebUI.click(findTestObject('Euromundo/book_steps/button_cancel_book'))

// ‚ùó Confirmar cancelaci√≥n
WebUI.waitForAlert(10)
WebUI.acceptAlert()

TestObject alertCancel = new TestObject('alertCancel')
alertCancel.addProperty('xpath', ConditionType.EQUALS, '//p[contains(@class,"booking-details__status-text") and contains(text(),"Su reserva ha sido cancelada.")]')
WebUI.waitForElementVisible(alertCancel, 10)
WebUI.scrollToElement(findTestObject('Euromundo/book_steps/bookings'), 10)
String actualText = WebUI.getText(alertCancel)
WebUI.verifyMatch(actualText.trim(), 'Su reserva ha sido cancelada.', false)
WebUI.comment('‚úÖ La reserva fue cancelada exitosamente.')

